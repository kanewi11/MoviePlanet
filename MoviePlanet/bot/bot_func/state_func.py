import json
import logging
import datetime
import traceback
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram import types
from ..states import ForwardState, PostState, EditPostState
from ..models import User, Admin, Post
from ..search_film import make_post
from ..keyboards import *
from .. import session, dp, bot, MY_CHANNEL_URL


@dp.message_handler(state=ForwardState.cancel_or_message,
                    content_types=['video', 'photo', 'document', 'text'],
                    chat_type=types.ChatType.PRIVATE)
async def forward_msg(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ –∏ –≤ –≥—Ä—É–ø–ø—É.

    :param message:
    :param state:
    :return:
    """
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=kb_start)
        await state.finish()
        return

    if not session.query(Admin).filter(Admin.user_id == message.from_user.id).first():
        return

    chats = []
    users = session.query(User).all()
    for user in users:
        chats.append(user.user_id)

    for chat in chats:
        if message.content_type == 'text':
            try:
                chat_id = await bot.get_chat(chat)
                await bot.send_message(chat_id.id, message.text)
            except:
                pass

        if message.content_type == 'photo':
            try:
                chat_id = await bot.get_chat(chat)

                if message.caption:
                    await bot.send_photo(chat_id.id, message.photo[-1].file_id, caption=message.caption)
                else:
                    await bot.send_photo(chat_id.id, message.photo[-1].file_id)
            except:
                pass

        if message.content_type == 'document':
            try:
                chat_id = await bot.get_chat(chat)
                if message.caption:
                    await bot.send_document(chat_id.id, message.document.file_id, caption=message.caption)
                else:
                    await bot.send_document(chat_id.id, message.document.file_id)
            except:
                pass

        if message.content_type == 'video':
            try:
                chat_id = await bot.get_chat(chat)
                if message.caption:
                    await bot.send_video(chat_id.id, message.video.file_id, caption=message.caption)
                else:
                    await bot.send_video(chat_id.id, message.video.file_id)
            except:
                pass

    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', reply_markup=kb_start)
    await state.finish()


@dp.message_handler(state=EditPostState.DATE_TIME, content_types=types.ContentTypes.TEXT)
async def edit_post_date_time(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.

    :param message:
    :param state:
    :return:
    """
    response = message.text
    if response == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå', reply_markup=kb_start)
        await state.finish()
        return
    try:
        async with state.proxy() as data:
            post_id = data['id']
        date = datetime.datetime.strptime(response.strip(), '%d.%m.%Y %H:%M')
        p = session.query(Post).filter(Post.id == int(post_id)).first()
        if not p:
            await message.answer('–û—à–∏–±–∫–∞, –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üòû', reply_markup=kb_start)
            await state.finish()
            return

        p.date_time = date

        try:
            session.commit()
            session.refresh()
        except:
            logging.warning(traceback.format_exc())
            session.rollback()

        await message.answer(f'‚úÖ –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {response}', reply_markup=kb_start)
        await state.finish()
        return
    except Exception as error:
        await message.answer(f'üò´ –û—à–∏–±–∫–∞ {error}', reply_markup=kb_start)


@dp.message_handler(state=PostState.DATA)
async def get_post(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –∞–¥–º–∏–Ω—É.

    :param message:
    :param state:
    :return:
    """

    response = message.text
    if response == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå', reply_markup=kb_start)
        await state.finish()
        return

    await message.answer('‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...')
    try:
        async with state.proxy() as data:
            data['data'] = await make_post(response)
        data = data['data']
        caption = f'üé¨ <b>{data["title"]}</b>\n\n' \
                  f'üåé <b>–ì–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞:</b> {data["year_country"]}\n' \
                  f'({data["serial"]})\n\n' \
                  f'‚≠êÔ∏è {data["rating"]}\n\n'\
                  f'<i>{data["description"]}</i>\n\n' \
                  f'<b>–ë–æ—Ç –≤ –∑–∞–∫—Ä–µ–ø–µ ‚òùÔ∏è </b>'
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=f'https://{data["poster"]}',
                             caption=caption)
        await message.answer('‚è± –í—ã—Å–ª–∞—Ç—å —Å–µ–π—á–∞—Å?\n'
                             '–ò–ª–∏ –≤—ã—à–ª–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n<b>01.01.2022 09:00</b>', reply_markup=kb_yes)
        await PostState.next()
    except Exception as error:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ "{error}",\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ!',
                             reply_markup=kb_start)
        await state.finish()
        return


@dp.message_handler(state=PostState.DATE_TIME)
async def now_or_later(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ —Å–µ–π—á–∞—Å –∏–ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å.

    :param message:
    :param state:
    :return:
    """

    response = message.text
    if response == '–í—ã—Å–ª–∞—Ç—å —Å–µ–π—á–∞—Å üöÄ':
        await message.answer('üí¨ –í—ã—Å—ã–ª–∞—é...', reply_markup=kb_start)
        async with state.proxy() as data:
            data = data['data']
            caption = f'üé¨ <b>{data["title"]}</b>\n\n' \
                      f'üåé <b>–ì–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞:</b> {data["year_country"]}\n' \
                      f'({data["serial"]})\n\n' \
                      f'‚≠êÔ∏è {data["rating"]}\n\n' \
                      f'<i>{data["description"]}</i>\n\n' \
                      f'<b>–ë–æ—Ç –≤ –∑–∞–∫—Ä–µ–ø–µ ‚òùÔ∏è </b>'
            chat_id = await bot.get_chat(MY_CHANNEL_URL)
            await bot.send_photo(chat_id=chat_id.id,
                                 photo=f'https://{data["poster"]}',
                                 caption=caption)

        await message.answer(text='‚úÖ –í—ã—Å–ª–∞–ª.', reply_markup=kb_start)
        await state.finish()
        return
    if response == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå', reply_markup=kb_start)
        await state.finish()
        return
    try:
        async with state.proxy() as data:
            p = Post(post=json.dumps(data['data']),
                     date_time=datetime.datetime.strptime(response.strip(), '%d.%m.%Y %H:%M'),
                     published=False)
            session.add(p)

            try:
                session.commit()
                session.refresh()
            except:
                logging.warning(traceback.format_exc())
                session.rollback()

        await message.answer(f'üïß –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {response}', reply_markup=kb_start)
        await state.finish()
    except Exception as error:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ "{error}" –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º',
                             reply_markup=ReplyKeyboardRemove())
