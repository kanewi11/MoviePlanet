import json
import datetime
import traceback

from aiogram.utils.exceptions import ChatNotFound
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram import types

from .decorators import cancel_handler
from .utils import send_films, get_data_about_film, forward_message, get_caption_for_channel
from .states_group import ForwardState, EditPostState, PostState, ChoiceFilmState
from ..models import Post, User
from ..config import MY_CHANNEL_URL
from ..keyboards import markup_yes, markup_admin
from .. import dp, bot, logging, Session


@dp.message_handler(state=ForwardState.CANCEL_OR_MASSAGE, content_types=['video', 'photo', 'document', 'text'])
@cancel_handler
async def forward_msg(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ –∏ –≤ –≥—Ä—É–ø–ø—É.

    :param message:
    :param state:
    :return:
    """
    session = Session()
    users = session.query(User).all()

    for user in users:
        try:
            await forward_message(message=message, user_id=user.user_id)
        except ChatNotFound:
            pass
        except Exception:
            logging.warning(traceback.format_exc())

    session.close()

    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', reply_markup=markup_admin)
    await state.finish()


@dp.message_handler(state=EditPostState.DATE_TIME, content_types=types.ContentTypes.TEXT)
@cancel_handler
async def edit_post_date_time(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    response = message.text

    async with state.proxy() as data:
        post_id = data['id']

    date = datetime.datetime.strptime(response.strip(), '%d.%m.%Y %H:%M')
    session = Session()
    post = session.query(Post).filter(Post.id == int(post_id)).first()
    session.close()
    if not post:
        await message.answer('–û—à–∏–±–∫–∞, –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üòû', reply_markup=markup_admin)
        return await state.finish()

    try:
        post.date_time = date
        session.commit()
    except Exception as error:
        logging.warning(traceback.format_exc())
        session.rollback()
        await message.answer(f'üò´ –û—à–∏–±–∫–∞ {error}', reply_markup=markup_admin)
        return await state.finish()

    await message.answer(f'‚úÖ –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {response}', reply_markup=markup_admin)
    await state.finish()


@dp.message_handler(state=PostState.DATA)
@cancel_handler
async def get_post(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –∞–¥–º–∏–Ω—É.

    :param message:
    :param state:
    :return:
    """

    response = message.text
    await message.answer('‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...')

    try:
        post_data = await get_data_about_film(response)
        async with state.proxy() as data:
            data['data'] = post_data

        caption = await get_caption_for_channel(data=post_data)

        await bot.send_photo(chat_id=message.from_user.id, photo=f'https://{post_data["poster"]}', caption=caption)
        await message.answer('‚è± –í—ã—Å–ª–∞—Ç—å —Å–µ–π—á–∞—Å?\n–ò–ª–∏ –≤—ã—à–ª–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n<b>01.01.2022 09:00</b>',
                             reply_markup=markup_yes)
        await PostState.next()
    except Exception as error:
        logging.warning(traceback.format_exc())
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ "{error}",\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ!', reply_markup=markup_admin)
        return await state.finish()


@dp.message_handler(state=PostState.DATE_TIME)
@cancel_handler
async def now_or_later(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ —Å–µ–π—á–∞—Å –∏–ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É"""
    response = message.text
    if response == '–í—ã—Å–ª–∞—Ç—å —Å–µ–π—á–∞—Å üöÄ':
        await message.answer('üí¨ –í—ã—Å—ã–ª–∞—é...', reply_markup=markup_admin)
        async with state.proxy() as data:
            post_data = data['data']

        caption = await get_caption_for_channel(data=post_data)
        chat_id = await bot.get_chat(MY_CHANNEL_URL)
        await bot.send_photo(chat_id=chat_id.id, photo=f'https://{post_data["poster"]}', caption=caption)
        await message.answer(text='‚úÖ –í—ã—Å–ª–∞–ª.', reply_markup=markup_admin)
        return await state.finish()

    async with state.proxy() as data:
        post_data = data['data']

    post = Post(post=json.dumps(post_data),
                date_time=datetime.datetime.strptime(response.strip(), '%d.%m.%Y %H:%M'),
                published=False)
    session = Session()
    try:
        session.add(post)
        session.commit()
    except Exception as error:
        logging.warning(traceback.format_exc())
        session.rollback()
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ "{error}" –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º',
                             reply_markup=ReplyKeyboardRemove())
    finally:
        session.close()

    await message.answer(f'üïß –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {response}', reply_markup=markup_admin)
    await state.finish()


@dp.message_handler(state=ChoiceFilmState.FILM_CHOICE, content_types=['text'])
async def send_film_state(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    await send_films(message=message, state=state)
