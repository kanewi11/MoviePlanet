from typing import Union
import traceback

import requests
from bs4 import BeautifulSoup as bs

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageCantBeDeleted

from .decorators import only_admin, subscribers_only
from .states_group import ChoiceFilmState
from ..config import SITE_URL, URL_DEFAULT_POSTER
from ..keyboards import markup_cancel_search, markup_admin
from ..models import User
from .. import bot, session, logging, cb


HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) '
                  'Chrome/102.0.0.0 Safari/537.36 '
}

API_URL = 'https://api.movielab.pro/api/v2/'
METHOD_SEARCH = 'search'


async def find_film(film_name: str) -> Union[list, None]:
    """
    –ò—â–µ–º —Ñ–∏–ª—å–º—ã, –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞
    –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–≤–∞—Ä–µ–π –≤ —Å–ø–∏—Å–∫–µ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    :param film_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞.
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∏–ª—å–º–µ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–µ, –∏–ª–∏ –Ω–∏—á–µ–≥–æ
    """
    data = {
        'title': film_name,
        'page': 1,
        'limit': 100
    }

    films = []

    response = requests.post(API_URL + METHOD_SEARCH, headers=HEADERS, json=data)
    if response.status_code != 200:
        return None

    json_response = response.json()

    pages = json_response['pagination']['pages']

    if pages < 2:
        return json_response['results']

    for page in range(1, pages + 1):
        data['page'] = page
        json_response = requests.post(API_URL + METHOD_SEARCH, headers=HEADERS, json=data).json()
        films += json_response['results']

    del json_response
    return films


async def add_user_in_db(user_id: Union[str, int]) -> None:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ User'–∞ –≤ –±–∞–∑—É

    :param user_id:
    :return:
    """
    is_new_user = session.query(User).filter(User.user_id == str(user_id)).first()
    if is_new_user:
        return

    user = User(str(user_id))
    try:
        session.add(user)
        session.commit()
    except Exception:
        logging.warning(traceback.format_exc())
        session.rollback()


async def get_data_about_film(url: str) -> Union[dict, None]:
    """
    –ü–∞—Ä—Å–∏–º —Å–∞–π—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –¥–µ–ª–∞–µ–º –ø–æ—Å—Ç, –µ—Å–ª–∏ –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å,
    –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ None

    :param url: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª.
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –Ω–∏—á–µ–≥–æ
    """
    response = requests.get(url, headers=HEADERS)

    if response.status_code != 200:
        return None

    soup = bs(response.text, 'lxml')
    poster = soup.find('img', class_='movie-page-container-main-info__poster__img').get('data-src').replace('//', '')
    title = soup.find('h1', class_='movie-page-container-main-info__data__title_ru').get_text(' ')
    year_country = soup.find('div', class_='movie-page-container-main-info__data__category__line-border').get_text(' ')
    description = soup.find('div', class_='movie-page-container-main-info__data__description').get_text(' ')
    rating = soup.find('div', class_='movie-page-container-main-info__data__ratings-star').find('span').get_text(' ')

    serial = soup.find('span', class_='movie-container_serial')
    if serial:
        serial.get_text(strip=True)
    else:
        serial = '–§–∏–ª—å–º'

    return {
        'poster': poster,
        'title': title,
        'year_country': year_country,
        'description': description.replace('&quest;', '?'),
        'rating': rating,
        'serial': serial
    }


async def delete_msg(user_id: Union[str, int], message_id: Union[str, int]) -> None:
    """–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await bot.delete_message(user_id, message_id)
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    except Exception:
        logging.warning(traceback.format_exc())


async def get_caption_for_bot(film_data: dict) -> (str, str):
    """–°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –∞ —Ç–∞–∫ –∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–µ—Ä–∞, –º–µ–Ω—è–µ–º –Ω–∞ —Å–≤–æ–π"""
    serial = '\n\n<b>(–°–µ—Ä–∏–∞–ª)</b>' if film_data['type'] == 'serial' else ''
    caption = f'<b>üìΩ {film_data["title_ru"]}</b> ({film_data["year"]}){serial}\n\n' \
              f'<b>–û–∑–≤—É—á–∫–∞</b>: {film_data["player"]["translator"]}\n' \
              f'<b>–ö–∞—á–µ—Å—Ç–≤–æ</b>: {film_data["player"]["quality"]}\n\n' \
              f'‚≠ê {film_data["rating"]}'
    poster = film_data["poster"]

    if poster == 'https://api-base.tech/no-poster.jpg' or not poster:
        poster = URL_DEFAULT_POSTER

    return poster, caption


async def set_last_message_id_in_db(user_id: Union[str, int], message_id: Union[str, int]) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥ id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –µ–≥–æ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å"""
    user = session.query(User).filter(User.user_id == user_id).first()
    try:
        user.last_message_id = int(message_id)
        session.commit()
    except Exception:
        logging.warning(traceback.format_exc())
        session.rollback()


async def delete_last_user_message(message: types.Message) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = session.query(User).filter(User.user_id == message.from_user.id).first()
    last_film_message_id = user.last_message_id
    if last_film_message_id:
        await delete_msg(user_id=message.chat.id, message_id=last_film_message_id)


@subscribers_only
async def send_films(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤"""
    await delete_msg(user_id=message.chat.id, message_id=message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_last_user_message(message=message)  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫)

    if message.text.startswith('/') or message.text == '–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ üôÖ‚Äç‚ôÇ':
        await delete_msg(user_id=message.chat.id, message_id=message.message_id)
        await delete_msg(user_id=message.chat.id, message_id=message.message_id + 1)
        await state.finish()
        return

    message_find = await bot.send_message(message.chat.id, text='üîé –ò—â—É...\n\n<i>–ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥.</i>')
    films = await find_film(message.text)
    await delete_msg(user_id=message.chat.id, message_id=message_find.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ

    if not films:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–µ–ª —Ñ–∏–ª—å–º –æ—Ç—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –Ω–µ –Ω–∞—à–µ–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        # –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–∏—Å–∫–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
        text_msg = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï"
        not_found_message = await bot.send_message(chat_id=message.chat.id, text=text_msg)
        await set_last_message_id_in_db(user_id=message.from_user.id, message_id=not_found_message.message_id)
        await state.finish()
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=f'üì∫ –°–º–æ—Ç—Ä–µ—Ç—å (1 –∏–∑ {len(films)})',
                                            url=f'{SITE_URL}/?q={films[0]["player"]["iframe_url"]}'))
    if len(films) > 1:  # –ï—Å–ª–∏ —Ñ–∏–ª—å–º–æ–≤ –±–æ–ª—å—à–µ —á–µ–º 1, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å–º—ã –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        keyboard.add(types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è', callback_data=cb.new(id=0, action='next')))

        async with state.proxy() as data:
            data['films'] = films
        await ChoiceFilmState.FILM_CHOICE.set()
    else:
        await state.finish()

    poster, caption = await get_caption_for_bot(film_data=films[0])
    message_film = await bot.send_photo(chat_id=message.chat.id, photo=poster, caption=caption, reply_markup=keyboard)

    await bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è',
                           reply_markup=markup_cancel_search)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∏–ª—å–º–æ–º/–∏ —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥ –∑–∞–ø—Ä–æ—Å–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
    await set_last_message_id_in_db(user_id=message.from_user.id, message_id=message_film.message_id)


async def forward_message(message: types.Message, user_id: Union[str, int]) -> None:
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    content_type = message.content_type
    if content_type == 'text':
        await bot.send_message(user_id, message.text)
    elif content_type == 'photo':
        if message.caption:
            await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption)
        else:
            await bot.send_photo(user_id, message.photo[-1].file_id)
    elif content_type == 'document':
        if message.caption:
            await bot.send_document(user_id, message.document.file_id, caption=message.caption)
        else:
            await bot.send_document(user_id, message.document.file_id)
    elif content_type == 'video':
        if message.caption:
            await bot.send_video(user_id, message.video.file_id, caption=message.caption)
        else:
            await bot.send_video(user_id, message.video.file_id)


async def get_caption_for_channel(data: dict) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
    caption = f'üé¨ <b>{data["title"]}</b>\n\n' \
              f'üåé <b>–ì–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞:</b> {data["year_country"]}\n' \
              f'({data["serial"]})\n\n' \
              f'‚≠êÔ∏è {data["rating"]}\n\n' \
              f'<i>{data["description"]}</i>\n\n' \
              f'<b>–ë–æ—Ç –≤ –∑–∞–∫—Ä–µ–ø–µ ‚òùÔ∏è </b>'
    return caption


@only_admin
async def admin_keyboard(message: types.Message):
    """–í—ã—Å—ã–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await bot.send_message(message.chat.id, text='–í—ã - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòé', reply_markup=markup_admin)
