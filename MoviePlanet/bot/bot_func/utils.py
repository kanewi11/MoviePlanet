import os
import traceback

import requests
from bs4 import BeautifulSoup as bs

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import BadRequest
from aiogram.utils.exceptions import MessageToDeleteNotFound

from ..config import CHANNELS_TO_SUBSCRIBE, SITE_URL, URL_DEFAULT_POSTER
from ..messages import msg_if_not_subscribed
from ..keyboards import kb_cancel_search
from ..states import ChoiceFilmState
from ..models import User
from .. import bot, session, logging, cb


headers = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) '
                  'Chrome/102.0.0.0 Safari/537.36 '
}

# –î–æ–º–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–æ–º–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é domain
with open(os.path.abspath('bot/domain.txt'), 'r') as file:
    domain = file.readline()


async def get_domain():
    """
    –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω —Å–∞–π—Ç–∞.
    –°–∞–π—Ç –º–µ–Ω—è–µ—Ç —Å–≤–æ–π –¥–æ–º–µ–Ω —Ä–∞–∑ –≤ –¥–µ–Ω, —Å—Ç–∞—Ä—ã–π –¥–æ–º–µ–Ω
    —É—Å—Ç–∞—Ä–µ–≤–∞–µ—Ç –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.
    1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å, —Å–º–æ—Ç—Ä–∏–º url –∏ —É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π '/'
    2) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω –≤ domain.txt
    """
    global domain
    domain = requests.get(f'{domain}', headers=headers).url[:-1]
    with open(os.path.abspath('bot/domain.txt'), 'w') as file_domain:
        file_domain.write(domain)


async def check_domain(url: str) -> None:
    """
     –ï—Å–ª–∏ –≤ —Å—Å—ã–ª–∫–µ –Ω–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–º–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π domain,
     –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_domain(), –¥–ª—è —Ç–æ–≥–æ,
     —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–æ–º.

    :param url: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–Ω–µ—á–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏

    :return: –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    """
    if domain not in url:
        await get_domain()


async def find_film(film_name: str) -> list or None:
    """
    –ò—â–µ–º —Ñ–∏–ª—å–º—ã, –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞
    –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–≤–∞—Ä–µ–π –≤ —Å–ø–∏—Å–∫–µ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    :param film_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞

    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∏–ª—å–º–µ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–µ, –∏–ª–∏ –Ω–∏—á–µ–≥–æ
    """
    data = {
        'type': 'search',
        'query': film_name,
        'filter-sort': 'rating_asc'
    }
    results = []
    try:
        response = requests.post(f'{domain}/api/', headers=headers, data=data)
        await check_domain(response.url)
        json_response = response.json()
        pages = json_response['pagination']['pages']
        if pages == 1:
            return json_response['results']
        for page in range(1, pages + 1):
            data['page'] = page
            json_response = requests.post(f'{domain}/api/', headers=headers, data=data).json()
            results += json_response['results']

        del json_response
        return results
    except Exception:
        logging.warning(traceback.format_exc())
        return None


async def add_user_in_db(user_id: str | int):
    user = session.query(User).filter(User.user_id == str(user_id)).first()
    if not user:
        user = User(user_id)
        session.add(user)

        try:
            session.commit()
            session.refresh()
        except:
            logging.warning(traceback.format_exc())
            session.rollback()


async def make_post(url: str) -> dict or None:
    """
    –ü–∞—Ä—Å–∏–º —Å–∞–π—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –¥–µ–ª–∞–µ–º –ø–æ—Å—Ç, –µ—Å–ª–∏ –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å,
    –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ None

    :param url: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª

    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –Ω–∏—á–µ–≥–æ
    """
    try:
        response = requests.get(url, headers=headers).text
        soup = bs(response, 'lxml')
        poster = soup.find('img',
                           class_='movie-page-container-main-info__poster__img').get('data-src').replace('//', '')
        title = soup.find('h1', class_='movie-page-container-main-info__data__title_ru').get_text(' ', strip=True)

        year_country = soup.find('div',
                                 class_='movie-page-container-main-info__data__category__line-border'
                                 ).get_text(' ', strip=True)

        description = soup.find('div',
                                class_='movie-page-container-main-info__data__description').get_text(' ', strip=True)
        rating = soup.find('div',
                           class_='movie-page-container-main-info__data__ratings-star'
                           ).find('span').get_text(' ', strip=True)

        try:
            serial = soup.find('span', class_='movie-container_serial').get_text(strip=True)
        except:
            serial = '–§–∏–ª—å–º'

        if not serial:
            serial = '–§–∏–ª—å–º'

        return {
            'poster': poster,
            'title': title,
            'year_country': year_country,
            'description': description.replace('&quest;', '?'),
            'rating': rating,
            'serial': serial
        }
    except Exception:
        logging.warning(traceback.format_exc())
        return None


async def delete_msg(user_id: str | int, message_id: str | int):
    try:
        await bot.delete_message(user_id, message_id)
    except MessageToDeleteNotFound:
        pass


async def make_film_message(film_data: dict) -> (str, str):
    serial = '\n<b>(–°–µ—Ä–∏–∞–ª)</b>' if film_data['type'] == 'serial' else ''
    caption = f'<b>üìΩ {film_data["title_ru"]}</b>{serial}\n\n' \
              f'<b>–û–∑–≤—É—á–∫–∞</b>: {film_data["player"]["translator"]}\n\n ' \
              f'‚≠ê {film_data["rating"]}'
    url_photo = f'https://{film_data["poster"].replace("//", "").replace("170-233", "680-1000")}'
    return url_photo, caption


async def set_last_message_id_in_db(user_id: str | int, message_id: str | int):
    user = session.query(User).filter(User.user_id == user_id).first()
    user.last_message_id = int(message_id)
    try:
        session.commit()
        session.refresh()
    except TypeError:
        session.rollback()
    except Exception:
        logging.warning(traceback.format_exc())
        session.rollback()


async def check_subscribe(user_id: str | int) -> bool:
    for group in CHANNELS_TO_SUBSCRIBE:
        user_channel_status = await bot.get_chat_member(chat_id=group, user_id=user_id)
        if user_channel_status["status"] == 'left':
            await bot.send_message(user_id=user_id, text=msg_if_not_subscribed)
            return False
    return True


async def send_films(message: types.Message, state: FSMContext):
    """
    –ü–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤

    :param message:
    :param state:
    :return:
    """
    await delete_msg(user_id=message.chat.id, message_id=message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user = session.query(User).filter(User.user_id == message.from_user.id).first()
    last_film_message_id = user.last_message_id
    if last_film_message_id:
        await delete_msg(user_id=message.chat.id, message_id=last_film_message_id)  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏–ª—å–º
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∏–ª—å–º–∞ "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è"
        await delete_msg(user_id=message.chat.id, message_id=last_film_message_id + 1)

    if not await check_subscribe(user_id=message.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        return

    if message.text.startswith('/') or message.text == '–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ üôÖ‚Äç‚ôÇ':
        await delete_msg(user_id=message.chat.id, message_id=message.message_id)
        await state.finish()
        return

    message_find = await bot.send_message(message.chat.id, text='üîé –ò—â—É...\n\n<i>–ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥.</i>')
    films = await find_film(message.text)
    await delete_msg(user_id=message.chat.id, message_id=message_find.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ

    if not films:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–µ–ª —Ñ–∏–ª—å–º –æ—Ç—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –Ω–µ –Ω–∞—à–µ–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        # –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–∏—Å–∫–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å

        text_msg = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï"
        not_found_message = await bot.send_message(chat_id=message.chat.id, text=text_msg)
        await set_last_message_id_in_db(user_id=message.from_user.id, message_id=not_found_message.message_id)
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=f'üì∫ –°–º–æ—Ç—Ä–µ—Ç—å (1 –∏–∑ {len(films)})',
                                            url=f'{SITE_URL}/?q={films[0]["player"]["iframe_url"]}'))
    if len(films) > 1:  # –ï—Å–ª–∏ —Ñ–∏–ª—å–º–æ–≤ –±–æ–ª—å—à–µ —á–µ–º 1, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å–º—ã –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        keyboard.add(types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è', callback_data=cb.new(id=0, action='next')))

        async with state.proxy() as data:
            data['films'] = films
        await ChoiceFilmState.FILM_CHOICE.set()
    else:
        await state.finish()

    url_photo, caption = await make_film_message(film_data=films[0])
    try:
        message_film = await bot.send_photo(chat_id=message.chat.id, photo=url_photo,
                                            caption=caption, reply_markup=keyboard)
    except BadRequest:
        message_film = await bot.send_photo(chat_id=message.chat.id, photo=URL_DEFAULT_POSTER,
                                            caption=caption, reply_markup=keyboard)

    await bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è', reply_markup=kb_cancel_search)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∏–ª—å–º–æ–º/–∏ —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥ –∑–∞–ø—Ä–æ—Å–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
    await set_last_message_id_in_db(user_id=message.from_user.id, message_id=message_film.message_id)
