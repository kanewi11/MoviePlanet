import json
import logging
import traceback
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram import types
from MoviePlanet.bot.states import ForwardState, PostState
from MoviePlanet.bot.model import User, Admin, Post
from MoviePlanet.bot.search_film import find_film
from MoviePlanet.bot.keyboards import *
from MoviePlanet.bot import session, cb, dp, bot, groups


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    if message.chat.type == "private":
        text_msg = "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞. üí¨\n" \
                   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–±–µ–∑ –æ—à–∏–±–æ–∫!</b> üòâ\n\n" \
                   "<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>\n<i>–ó–µ–ª–µ–Ω–∞—è –º–∏–ª—è</i>\n\n" \
                   "<b>–ù–∞–±–ª—é–¥–∞—é—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º, –Ω–µ –≤—Å–µ —Å–µ—Ä–∏–∞–ª—ã –∏ —Ñ–∏–ª—å–º—ã –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏, –∞ —Ç–∞–∫–∂–µ " \
                   "–ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–µ—Ä–∏–∞–ª–æ–≤.\n\n–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–∂–µ –≤ " \
                   "–∫—É—Ä—Å–µ –∏ —á–∏–Ω–∏—Ç –≤—Å–µ!</b>"
    else:
        text_msg = "–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö."

    r = User(message.from_user.id)
    session.add(r)

    try:
        session.commit()
        session.refresh()
    except:
        logging.warning(traceback.format_exc())
        session.rollback()

    admin = session.query(Admin).filter(Admin.user_id == str(message.from_user.id)).first()
    if not admin:
        await bot.send_message(message.chat.id, text=text_msg)
        return
    await bot.send_message(message.chat.id, text=text_msg, reply_markup=kb_start)


@dp.message_handler(commands=['help'])
async def command_help(message: types.Message):
    text_msg = """
<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b>

<i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞</i>  üí≠üì§

–ù–∞–ø—Ä–∏–º–µ—Ä:
<b>–ó–µ–ª–µ–Ω–∞—è –º–∏–ª—è</b>

<b>–ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å–º—ã?</b>

<i>–ü—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ. –û–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ <b>30 –º–∏–Ω—É—Ç</b>.</i> 
        """

    await bot.send_message(message.chat.id, text=text_msg)


@dp.message_handler(text="–°–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç —Ñ–∏–ª—å–º–∞ ü§≥")
async def post(message: types.Message):
    admin = session.query(Admin).filter(Admin.user_id == str(message.from_user.id)).first()

    if not admin:
        return

    await message.answer("üèÅ –ò—Ç–∞–∫, –ø—Ä–∏—Å—Ç—É–ø–∏–º.\n\nüîó –í—ã—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª!", reply_markup=kb_cancel)
    await PostState.first()


@dp.message_handler(text="–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã üïú")
async def deferred_post(message: types.Message):
    admin = session.query(Admin).filter(Admin.user_id == str(message.from_user.id)).first()

    if not admin:
        return

    posts = session.query(Post).all()
    if not posts:
        await message.answer('–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ ü´ô')
        return
    for p in posts:
        kb_edit_delete = InlineKeyboardMarkup(row_width=2)
        kb_edit_delete.add(
            InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å ‚è±', callback_data=cb.new(id=p.id, action="edit")),
            InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å ‚ùå', callback_data=cb.new(id=p.id, action="delete")))
        json_data = json.loads(p.post)
        caption = f'üé¨ <b>{json_data["title"]}</b>\n\n' \
                  f'üåé <b>–ì–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞:</b> {json_data["year_country"]}\n' \
                  f'({json_data["serial"]})\n\n' \
                  f'‚≠êÔ∏è {json_data["rating"]}\n\n' \
                  f'<i>{json_data["description"]}</i>\n\n' \
                  f'<b>–ë–æ—Ç –≤ –∑–∞–∫—Ä–µ–ø–µ ‚òùÔ∏è </b>\n\n' \
                  f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{p.date_time.strftime("%d.%m.%Y %H:%M")}</b>'
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=f'https://{json_data["poster"]}',
                             caption=caption, reply_markup=kb_edit_delete)


@dp.message_handler(text="–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç üí∞")
async def wait_forward(message: types.Message, state: FSMContext):
    admin = session.query(Admin).filter(Admin.user_id == str(message.from_user.id)).first()

    if not admin:
        return

    await message.answer('–ñ–¥—É –ø–æ—Å—Ç...', reply_markup=button_cancel)
    await ForwardState.cancel_or_message.set()


@dp.message_handler()
async def main(message: types.Message):
    if message.chat.type != "private":
        text_msg = "–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö."
        return await bot.send_message(message.chat.id, text=text_msg)

    if message.text.startswith('/'):
        text_msg = "–•–º–º–º...\n–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø—Ä–∏–ø–æ–º–Ω—é ü§î"
        return await bot.send_message(message.chat.id, text=text_msg)

    for group in groups:
        user_channel_status = await bot.get_chat_member(chat_id=group, user_id=message.from_user.id)
        if user_channel_status["status"] != 'left':
            pass
        else:
            groups_txt = "\n".join(groups)
            await bot.send_message(message.from_user.id, f'–°–¢–û–ô!\n\n'
                                                         f'–ü–æ–¥–ø–∏—à–∏—Å—å —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:\n{groups_txt}\n\n'
                                                         f'–¢–æ–≥–¥–∞ —Ç–µ–±–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø, —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ,\n'
                                                         f'—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!')
            return

    await bot.send_message(message.chat.id, text='üîé –ò—â—É...\n–ü–æ–∏—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥.')
    films = await find_film(message.text)

    if not films:
        text_msg = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï"
        return await bot.send_message(message.chat.id, text=text_msg)

    for film in films:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="üì∫ –°–º–æ—Ç—Ä–µ—Ç—å",
                                                url='http://kingzmsk.ru/?q=' +
                                                    film['player']['iframe_url']
                                                    + '?d=movielab.top'))
        serial = ''
        if film['type'] == 'serial':
            serial = '\n<b>(–°–µ—Ä–∏–∞–ª)</b>'
        caption = f'<b>üìΩ {film["title_ru"]}</b>{serial}\n\n' \
                  f'<b>–û–∑–≤—É—á–∫–∞</b>: {film["player"]["translator"]}\n\n ' \
                  f'‚≠ê {film["rating"]}'
        await bot.send_photo(message.chat.id,
                             photo=f'https://{film["poster"].replace("//", "").replace("170-233", "680-1000")}',
                             caption=caption,
                             reply_markup=keyboard)
