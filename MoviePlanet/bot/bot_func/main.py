import json
import traceback

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram import types

from .utils import send_films, add_user_in_db

from ..messages import msg_start, msg_help, msg_if_not_subscribed
from ..states import ForwardState, PostState, ChoiceFilmState
from .. import session, cb, dp, bot, logging
from ..keyboards import kb_cancel, kb_start, button_cancel
from ..models import Admin, Post, User
from ..config import CHANNELS_TO_SUBSCRIBE


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    """
    –í—Å–µ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ, —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã start.
    –¢—É—Ç –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.

    :param message:
    :return:
    """
    text_msg = msg_start
    user = session.query(User).filter(User.user_id == str(message.from_user.id)).first()
    if not user:
        user = User(message.from_user.id)
        session.add(user)

        try:
            session.commit()
            session.refresh()
        except:
            logging.warning(traceback.format_exc())
            session.rollback()

    admin = session.query(Admin).filter(Admin.user_id == str(message.from_user.id)).first()
    if not admin:
        await bot.send_message(message.chat.id, text=text_msg.format(message.from_user.first_name))
        for group in CHANNELS_TO_SUBSCRIBE:
            user_channel_status = await bot.get_chat_member(chat_id=group, user_id=message.from_user.id)
            if user_channel_status["status"] == 'left':
                await bot.send_message(message.from_user.id, msg_if_not_subscribed)
                return
        return

    await bot.send_message(message.chat.id, text=text_msg.format(message.from_user.first_name), reply_markup=kb_start)


@dp.message_handler(commands=['help'])
async def command_help(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã help –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏.

    :param message:
    :return:
    """

    text_msg = msg_help

    await bot.send_message(message.chat.id, text=text_msg)


@dp.message_handler(text="–°–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç —Ñ–∏–ª—å–º–∞ ü§≥")
async def post(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ.

    :param message:
    :return:
    """

    admin = session.query(Admin).filter(Admin.user_id == str(message.from_user.id)).first()

    if not admin:
        text_msg = "–•–º–º–º... (–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)"
        return await bot.send_message(message.chat.id, text=text_msg)

    await message.answer("üèÅ –ò—Ç–∞–∫, –ø—Ä–∏—Å—Ç—É–ø–∏–º.\n\nüîó –í—ã—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª!", reply_markup=kb_cancel)
    await PostState.first()


@dp.message_handler(text="–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã üïú")
async def deferred_post(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.

    :param message:
    :return:
    """

    admin = session.query(Admin).filter(Admin.user_id == str(message.from_user.id)).first()

    if not admin:
        text_msg = "–•–º–º–º... (–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)"
        return await bot.send_message(message.chat.id, text=text_msg)

    posts = session.query(Post).all()
    if not posts:
        await message.answer('–ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ ü´ô')
        return

    for p in posts:
        kb_edit_delete = InlineKeyboardMarkup(row_width=2)
        kb_edit_delete.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å ‚è±', callback_data=cb.new(id=p.id, action="edit")),
                           InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å ‚ùå', callback_data=cb.new(id=p.id, action="delete")))

        json_data = json.loads(p.post)
        caption = f'üé¨ <b>{json_data["title"]}</b>\n\n' \
                  f'üåé <b>–ì–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞:</b> {json_data["year_country"]}\n' \
                  f'({json_data["serial"]})\n\n' \
                  f'‚≠êÔ∏è {json_data["rating"]}\n\n' \
                  f'<i>{json_data["description"]}</i>\n\n' \
                  f'<b>–ë–æ—Ç –≤ –∑–∞–∫—Ä–µ–ø–µ ‚òùÔ∏è </b>\n\n' \
                  f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{p.date_time.strftime("%d.%m.%Y %H:%M")}</b>'
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=f'https://{json_data["poster"]}',
                             caption=caption, reply_markup=kb_edit_delete)


@dp.message_handler(text="–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç üí∞")
async def wait_forward(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–ø–∏—Å–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏)

    :param message:
    :param state:
    :return:
    """
    admin = session.query(Admin).filter(Admin.user_id == str(message.from_user.id)).first()

    if not admin:
        text_msg = "–•–º–º–º... (–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)"
        return await bot.send_message(message.chat.id, text=text_msg)

    await message.answer('–ñ–¥—É –ø–æ—Å—Ç...', reply_markup=button_cancel)
    await ForwardState.CANCEL_OR_MASSAGE.set()


@dp.message_handler(content_types=['text'])
async def send_film(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ,
    –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    :param state:
    :param message:
    :return:
    """
    await add_user_in_db(user_id=message.from_user.id)
    await send_films(message=message, state=state)
    await ChoiceFilmState.first()
