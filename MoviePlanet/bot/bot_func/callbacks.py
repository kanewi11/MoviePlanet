import traceback

from aiogram.utils.exceptions import BadRequest
from aiogram.dispatcher import FSMContext
from aiogram import types

from .utils import get_caption_for_bot
from .states_group import EditPostState
from ..config import URL_DEFAULT_POSTER, SITE_URL
from ..keyboards import markup_admin, markup_cancel
from .. import cb, dp, logging, Session
from ..models import Post


@dp.callback_query_handler(cb.filter(action=['delete']))
async def callback_delete_post(call: types.CallbackQuery, callback_data: dict):
    """
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.

    :param call:
    :param callback_data:
    :return:
    """
    session = Session()
    post = session.query(Post).filter(Post.id == int(callback_data['id'])).first()

    try:
        session.delete(post)
        session.commit()
    except Exception:
        logging.warning(traceback.format_exc())
        session.rollback()
    finally:
        session.close()

    await call.message.answer('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω üóë', reply_markup=markup_admin)


@dp.callback_query_handler(cb.filter(action=['edit']), state='*')
async def callback_edit_post(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.

    :param call:
    :param callback_data:
    :param state:
    :return:
    """
    async with state.proxy() as data:
        data['id'] = callback_data['id']

    await call.message.answer('üìÖ –í—ã—à–ª–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n<b>01.01.2022 09:00</b>',
                              reply_markup=markup_cancel)
    await EditPostState.DATE_TIME.set()


@dp.callback_query_handler(cb.filter(action=['next', 'previous']), state='*')
async def choice_film(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ª–∏—Å—Ç–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤, —Ç–æ –µ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –Ω–µ —Å–∞–º—ã–π –∏–∑—è—â–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –Ω–æ –≤—Å–µ –∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)

    :param call:
    :param callback_data:
    :param state:
    :return:
    """
    async with state.proxy() as data:
        films = data['films']

    if callback_data['action'] == 'next':
        callback_data['id'] = int(callback_data['id']) + 1
    else:
        callback_data['id'] = int(callback_data['id']) - 1

    id_film = int(callback_data['id'])

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text=f'üì∫ –°–º–æ—Ç—Ä–µ—Ç—å ({id_film + 1} –∏–∑ {len(films)})',
                                            url=f'{SITE_URL}/?q={films[id_film]["player"]["iframe_url"]}'))

    kb_next = types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è', callback_data=cb.new(id=id_film, action='next'))
    kb_previous = types.InlineKeyboardButton('‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data=cb.new(id=id_film, action='previous'))

    if id_film != len(films) - 1 and id_film != 0:  # –ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ –ø–µ—Ä–≤—ã–π –∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π
        keyboard.add(kb_previous, kb_next)
    elif id_film == 0:  # –ï—Å–ª–∏ —Ñ–∏–ª—å–º –ø–µ—Ä–≤—ã–π
        keyboard.add(kb_next)
    else:  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
        keyboard.add(kb_previous)

    url_photo, caption = await get_caption_for_bot(films[id_film])
    photo = types.InputMediaPhoto(media=url_photo, caption=caption)

    try:
        await call.message.edit_media(media=photo, reply_markup=keyboard)
    except BadRequest:  # –ò–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ—Å—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å—Å—è –≤ —Ç–≥, –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ –Ω–∞ –Ω–∞—à
        photo = types.InputMediaPhoto(media=URL_DEFAULT_POSTER, caption=caption)
        await call.message.edit_media(media=photo, reply_markup=keyboard)
